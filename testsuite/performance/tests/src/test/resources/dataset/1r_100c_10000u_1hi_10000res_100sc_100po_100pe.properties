# REALM
realms=1
realm.realm=realm_${index}
realm.displayName=Realm ${index}
realm.enabled=true
realm.registrationAllowed=true
realm.accessTokenLifeSpan=60
realm.passwordPolicy=hashIterations(1)

# REALM ROLE
realmRolesPerRealm=10
realmRole.name=role_${index?string("00")}_of_${realm.realm}
realmRole.description=Role ${index} of ${realm.displayName}

# CLIENT
clientsPerRealm=100
client.clientId=client_${index?string("00")}_of_${realm.realm}
client.name=Client ${index} of ${realm.displayName}
client.description=Description of ${name}
client.rootUrl=
client.adminUrl=
client.baseUrl=http://clients.${realm.realm}.test/client_${index}
client.enabled=true
client.secret=secret_of_${clientId}
client.redirectUris=${baseUrl}/*
client.webOrigins=
client.protocol=openid-connect
client.publicClient=<#if index % 3 == 0>true<#else>false</#if>
client.bearerOnly=<#if index % 3 == 1>true<#else>false</#if>
client.authorizationServicesEnabled=${(!isPublicClient() && !isBearerOnly())?c}
client.serviceAccountsEnabled=${authorizationServicesEnabled?c}

# CLIENT ROLE
clientRolesPerClient=10
clientRole.name=clientrole_${index?string("00")}_of_${client.clientId}
clientRole.description=Role ${index} of ${client.name}

# USER
usersPerRealm=10000
user.username=user_${index?string("0000")}_of_${realm.realm}
user.enabled=true
user.email=${username}@email.test
user.emailVerified=true
user.firstName=User_${index}
user.lastName=O'Realm_${realm.index}

credential.type=password
credential.value=password_${index}_of_${user.username}
credential.temporary=false

# USER ATTRIBUTE
attributesPerUser=0
userAttribute.name=attribute_${index?string("00")}
userAttribute.value=<#list 0..2 as i>value_${i}_of_${name}<#sep>,</#sep></#list>

# USER ROLE MAPPINGS
realmRolesPerUser=1
clientRolesPerUser=3


# GROUP
groupsPerRealm=3
group.name=group_${index?string("00")}_of ${realm.realm}

# GROUP ATTRIBUTE
attributesPerGroup=3
groupAttribute.name=attribute_${index?string("00")}
groupAttribute.value=<#list 0..2 as i>value_${i}_of_${name}<#sep>,</#sep></#list>



### AUTHZ
# RESOURCE SERVER
resourceServer.allowRemoteResourceManagement=false
resourceServer.policyEnforcementMode=ENFORCING

# SCOPE
scopesPerResourceServer=100
scope.name=scope_${index}_of_${resourceServer.clientId}
scope.displayName=Scope ${index} of ${resourceServer.clientId}

# RESOURCE
resourcesPerResourceServer=10000
resource.name=resource_${index?string("0000")}_of_${resourceServer.clientId}
resource.displayName=Resource ${index} of ${resourceServer.clientId}
resource.uri=${resourceServer.client.baseUrl}/resource_${index}
resource.type=urn:${resourceServer.clientId}:resources:default
resource.ownerManagedAccess=${indexBasedRandomBool(50)?c}

# RESOURCE MAPPINGS
scopesPerResource=1


# ROLE POLICY
rolePoliciesPerResourceServer=100
rolePolicy.name=role_policy_${index}_of_${resourceServer.clientId}
rolePolicy.description=Role Policy ${index} of ${resourceServer.name}
rolePolicy.logic=POSITIVE

# ROLE POLICY ROLE DEFINITION
rolePolicyRoleDefinition.required=${indexBasedRandomBool(50)?c}
realmRolesPerRolePolicy=1
clientRolesPerRolePolicy=3


# JS POLICY
jsPoliciesPerResourceServer=100
jsPolicy.name=js_policy_${index}_of_${resourceServer.clientId}
jsPolicy.description=JavaScript Policy ${index} of ${resourceServer.name}
jsPolicy.code=// TODO add some JavaScript code\n// for JavaScript Policy ${index}\n// more\n// lines ...
jsPolicy.logic=POSITIVE

# USER POLICY
userPoliciesPerResourceServer=100
userPolicy.name=user_policy_${index}_of_${resourceServer.clientId}
userPolicy.description=User Policy ${index} of ${resourceServer.name}
userPolicy.logic=POSITIVE

# USER POLICY MAPPINGS
usersPerUserPolicy=1


# CLIENT POLICY
clientPoliciesPerResourceServer=100
clientPolicy.name=client_policy_${index}_of_${resourceServer.clientId}
clientPolicy.description=Client Policy ${index} of ${resourceServer.name}
clientPolicy.logic=POSITIVE

# CLIENT POLICY MAPPINGS
clientsPerClientPolicy=1


# RESOURCE PERMISSION
resourcePermissionsPerResourceServer=100
resourcePermission.name=resource_permission_${index}_of_${resourceServer.clientId}
resourcePermission.description=Resource Permisison ${index} of ${resourceServer.name}
resourcePermission.resourceType=<#if indexBasedRandomBool(50)>urn:${resourceServer.clientId}:resources:default<#else></#if>
resourcePermission.decisionStrategy=UNANIMOUS

# RESOURCE PERMISSION MAPPINGS
resourcesPerResourcePermission=1
policiesPerResourcePermission=3


# SCOPE PERMISSION
scopePermissionsPerResourceServer=100
scopePermission.name=scope_permission_${index}_of_${resourceServer.clientId}
scopePermission.description=Scope Permisison ${index} of ${resourceServer.name}
scopePermission.decisionStrategy=UNANIMOUS

# SCOPE PERMISSION MAPPINGS
scopesPerScopePermission=1
policiesPerScopePermission=3
